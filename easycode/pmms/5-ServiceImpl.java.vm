##ServiceImpl
##定义初始变量
#set($className = $tool.append($setting.fileNamePrefix, $fileClass.name, $setting.fileNameSuffix, "ServiceImpl"))
#set($serviceName = $tool.append($setting.fileNamePrefix, $fileClass.name, $setting.fileNameSuffix, "Service"))
#set($entityName = $!{fileClass.name})

##设置回调
$!setting.setFileName($tool.append($className, ".java"))

##拿到主键
#foreach($column in $fileClass.allFields)
    #if(!$column.name.equals("id"))
        #set($pk = $column)
    #end
#end


#set($basePackage = $!{file.packageName.substring(0,${file.packageName.indexOf(".model")})})
#set($dataName = $!{tool.decapitalize($!{entityName})})

package ${basePackage}.service.impl;

import $!{basePackage}.model.entity.Q$!{entityName};
import $!{basePackage}.model.entity.$!{entityName};
import $!{basePackage}.dao.$!{entityName}Dao;
import $!{basePackage}.service.$!{entityName}Service;
import org.springframework.stereotype.Service;
import $!{basePackage}.model.response.SaveAllResponse;
import $!{basePackage}.model.response.TotalResponse;
import $!{basePackage}.model.response.SaveResponse;
import $!{basePackage}.model.request.DeleteDataRequest;
import $!{basePackage}.model.request.FetchDataRequest;
import com.querydsl.core.types.dsl.SimpleExpression;
import com.querydsl.jpa.impl.JPAUpdateClause;
import org.springframework.util.ReflectionUtils;
import java.lang.reflect.Field;
import com.onestep.os.model.exception.ValidationException;
import $!{basePackage}.model.request.$tool.packageName($fileClass.name).*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import com.onestep.pmms.utils.ExceptionGenerator;
import javax.persistence.EntityManager;
import com.querydsl.core.types.OrderSpecifier;
import com.onestep.pmms.utils.UUIDUtils;
import com.onestep.os.utils.JsonUtils;
import org.springframework.util.StringUtils;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.onestep.pmms.model.BaseEntity;
import org.springframework.util.ObjectUtils;
import java.util.stream.Collectors;
import com.querydsl.jpa.impl.JPAQuery;
import java.util.ArrayList;
import javax.persistence.PersistenceContext;
import javax.annotation.Resource;
import java.util.List;

@Service
public class $!{className} implements $!{serviceName}{

@Autowired
private $!{entityName}Dao $!{dataName}Dao;

@PersistenceContext
private EntityManager entityManager;

@Override
@Transactional(rollbackFor = Exception.class)
public SaveAllResponse save$!{entityName}List(Save$!{entityName}ListRequest request){
final List<$!{entityName}> itemList=request.getDataList()
        .stream()
        .map(itemDto->{
final $!{entityName} $!{dataName};
        if(!StringUtils.isEmpty(itemDto.getId())){
            $!{dataName} = $!{dataName}Dao.findById(itemDto.getId())
                .orElseThrow(()->ExceptionGenerator.sourceNotFound($!{entityName}.class,"id",JsonUtils.writeJson(itemDto)));
        }else{
    $!{dataName} =new $!{entityName}();
    $!{dataName}.setId(UUIDUtils.getId());
    $!{dataName}.setCreateBy(request.getUserId());
        }

    #foreach($column in $fileClass.allFields)
        #if(!$tool.match($column.name, "^(update|delete|create).*$")&&!${column.hasModifierProperty(
            "static")}&&!${column.name.equals("id")})
                if(!request.getIgnoreNull()||itemDto.get$!tool.capitalize(${column.name})()!=null){
            $!{dataName}.set$!tool.capitalize(${column.name})(itemDto.get$!tool.capitalize(${column.name})());
                }
        #end
    #end



    $!{dataName}.setUpdateBy(request.getUserId());
        return $!{dataName};
        })
        .collect(Collectors.toList());
    $!{dataName}Dao.saveAll(itemList);
        return SaveAllResponse.builder()
        .id(itemList
        .stream()
        .map(BaseEntity::getId)
        .collect(Collectors.toList()))
        .build();
        }


private List<BooleanExpression> build$!{entityName}Query(Fetch$!{entityName}ConditionInterface request){
final Q$!{entityName} $!{dataName}=Q$!{entityName}.$!{dataName};

final List<BooleanExpression> expressionList=new ArrayList<>();

    #foreach($column in $fileClass.allFields)
        #if(!$tool.match($column.name, "^(update|delete|create).*$")&&!${column.hasModifierProperty("static")})
                if(!ObjectUtils.isEmpty(request.get$!tool.capitalize(${column.name})())){
                expressionList.add($!{dataName}.${column.name}.in(request.get$!tool.capitalize(${column.name})()));
                }
        #end
    #end

        return expressionList;
        }

@Override
public TotalResponse<$!{entityName}> fetch$!{entityName}List(Fetch$!{entityName}ListRequest request){
final Q$!{entityName} $!{dataName}=Q$!{entityName}.$!{dataName};

final List<BooleanExpression> expressionList=build$!{entityName}Query(request);

        //===== order ===============
final List<OrderSpecifier> orderSpecifiers=new ArrayList<>();
        if(!ObjectUtils.isEmpty(request.getOrderByUpdateAt())){
        switch(request.getOrderByUpdateAt()){
        case ASC:
        orderSpecifiers.add($!{dataName}.updateAt.asc());
        break;
        case DESC:
        orderSpecifiers.add($!{dataName}.updateAt.desc());
        }
        }


final JPAQuery<$!{entityName}> jpaQuery=new JPAQuery<>(entityManager)
        .select($!{dataName})
        .from($!{dataName})
        .where(expressionList.toArray(new BooleanExpression[0]))
        .orderBy(orderSpecifiers.toArray(new OrderSpecifier[0]));

        return FetchDataRequest.handlePageResult(request,jpaQuery);
        }


@Override
public TotalResponse fetch$!{entityName}GroupFiledList(Fetch$!{entityName}GroupFiledRequest request){
final Q$!{entityName} $!{dataName}=Q$!{entityName}.$!{dataName};

final String fieldName=request.getFieldName();
final Field field=ReflectionUtils.findField(Q$!{entityName}.class,fieldName);
        if(field==null){
        throw new IllegalArgumentException("fieldName is not exist");
        }
final SimpleExpression<?> fieldExpression=(SimpleExpression)ReflectionUtils.getField(field, $!{dataName});


final List<BooleanExpression> expressionList=build$!{entityName}Query(request);
        expressionList.add(fieldExpression.isNotNull());

        //===== order ===============
final List<OrderSpecifier> orderSpecifiers=new ArrayList<>();
        if(!ObjectUtils.isEmpty(request.getOrderByUpdateAt())){
        switch(request.getOrderByUpdateAt()){
        case ASC:
        orderSpecifiers.add($!{dataName}.updateAt.asc());
        break;
        case DESC:
        orderSpecifiers.add($!{dataName}.updateAt.desc());
        }
        }

        JPAQuery<?> jpaQuery=new JPAQuery<>(entityManager)
        .select(fieldExpression)
        .from($!{dataName})
        .where(expressionList.toArray(new BooleanExpression[0]));
        if(request.getGroupByField()){
        jpaQuery=jpaQuery.groupBy(fieldExpression);
        }
        jpaQuery=jpaQuery.orderBy(orderSpecifiers.toArray(new OrderSpecifier[0]));
        return FetchDataRequest.handlePageResult(request,jpaQuery);
        }

@Override
@Transactional(rollbackFor = Exception.class)
public void delete$!{entityName}(DeleteDataRequest request){
    $!{dataName}Dao.softDelete(System.currentTimeMillis(),request.getUserId(),request.getId());
        }

@Override
@Transactional(rollbackFor = Exception.class)
public Long delete$!{entityName}ByQuery(Delete$!{entityName}Request request){

final Q$!{entityName} $!{dataName}=Q$!{entityName}.$!{dataName};

final List<BooleanExpression> expressionList=build$!{entityName}Query(request);
        if(ObjectUtils.isEmpty(expressionList)){
        throw new ValidationException("Dose not work when expression is empty");
        }
        return new JPAUpdateClause(entityManager, $!{dataName})
        .set($!{dataName}.deleteAt,System.currentTimeMillis())
        .set($!{dataName}.deleteBy,request.getUserId())
        .set($!{dataName}.updateAt,System.currentTimeMillis())
        .set($!{dataName}.updateBy,request.getUserId())
        .where(expressionList.toArray(new BooleanExpression[0]))
        .execute();
        }


@Override
@Transactional(rollbackFor = Exception.class)
public Long update$!{entityName}ByQuery(Update$!{entityName}Request request){
final Q$!{entityName} $!{dataName}=Q$!{entityName}.$!{dataName};

final List<BooleanExpression> expressionList=build$!{entityName}Query(request.get$!{entityName}Condition());

        if(ObjectUtils.isEmpty(expressionList)
        ){
        throw new ValidationException("Dose not work when expression is empty");
        }

        JPAUpdateClause updateQuery=new JPAUpdateClause(entityManager, $!{dataName});
    #foreach($column in $fileClass.allFields)
        #if(!$tool.match($column.name, "^(update|delete|create).*$")&&!${column.hasModifierProperty("static")})
                if(request.get$!{entityName}DTO().get$!tool.capitalize(${column.name})()!=null){
                updateQuery=updateQuery.set($!{dataName}.${column.name},request.get$!{entityName}DTO().get$!tool.capitalize(${column.name})());
                }
        #end
    #end
        return updateQuery
        .set($!{dataName}.updateAt,System.currentTimeMillis())
        .set($!{dataName}.updateBy,request.getUserId())
        .where(expressionList.toArray(new BooleanExpression[0]))
        .execute();
        }

        }