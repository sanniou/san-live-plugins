##ServiceImpl
##定义初始变量
#set($className = $tool.append($fileClass.name, "ServiceImpl"))
##设置回调

$!setting.setFileName($tool.append($fileClass.name, "ServiceImpl.java"))

##拿到主键
#foreach($column in $fileClass.allFields)
    #if(!$column.name.equals("id"))
        #set($pk = $column)
    #end
#end


#set($basePackage = $!{file.packageName.substring(0,${file.packageName.indexOf(".model")})})
#set($dataName = $!{tool.decapitalize($!{fileClass.name})})

package ${basePackage}.service.impl;

import $!{basePackage}.model.entity.Q$!{fileClass.name};
import $!{basePackage}.model.entity.$!{fileClass.name};
import $!{basePackage}.dao.$!{fileClass.name}Dao;
import $!{basePackage}.service.$!{fileClass.name}Service;
import org.springframework.stereotype.Service;
import $!{basePackage}.model.response.SaveAllResponse;
import $!{basePackage}.model.response.TotalResponse;
import $!{basePackage}.model.response.SaveResponse;
import $!{basePackage}.model.request.DeleteDataRequest;
import $!{basePackage}.model.request.FetchDataRequest;
import $!{basePackage}.model.request.Fetch$!{fileClass.name}ListRequest;
import $!{basePackage}.model.request.Save$!{fileClass.name}ListRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;
import com.onestep.pmms.utils.ExceptionGenerator;

import javax.persistence.EntityManager;
import com.querydsl.core.types.OrderSpecifier;

import com.onestep.pmms.utils.UUIDUtils;
import com.onestep.os.utils.JsonUtils;
import org.springframework.util.StringUtils;
import com.querydsl.core.types.dsl.BooleanExpression;
import com.onestep.pmms.model.BaseEntity;

import org.springframework.util.ObjectUtils;
import java.util.stream.Collectors;
import com.querydsl.jpa.impl.JPAQuery;
import java.util.ArrayList;

import javax.persistence.PersistenceContext;
import javax.annotation.Resource;
import java.util.List;

@Service
public class $!{className} implements $!{fileClass.name}Service{

@Autowired
private $!{fileClass.name}Dao $!tool.decapitalize($!{fileClass.name})Dao;

@PersistenceContext
private EntityManager entityManager;

@Override
public SaveAllResponse save$!{fileClass.name}List(Save$!{fileClass.name}ListRequest request){
final List<$!{fileClass.name}> itemList=request.getDataList()
        .stream()
        .map(item->{
final $!{fileClass.name} $!{dataName};
        if(!StringUtils.isEmpty(item.getId())){
            $!{dataName} = $!{dataName}Dao.findById(item.getId())
                .orElseThrow(()->ExceptionGenerator.sourceNotFound($!{fileClass.name}.class,"id",JsonUtils.writeJson(item)));
        }else{
    $!{dataName} =new $!{fileClass.name}();
    $!{dataName}.setId(UUIDUtils.getId());
    $!{dataName}.setCreateBy(request.getUserId());
        }

    #foreach($column in $fileClass.allFields)
        #if(!$tool.match($column.name, "^(update|delete|create).*$")&&!${column.hasModifierProperty("static")})
                if(!request.getIgnoreNull()||item.get$!tool.capitalize(${column.name})()!=null){
            $!{dataName}.set$!tool.capitalize(${column.name})(item.get$!tool.capitalize(${column.name})());
                }
        #end
    #end



    $!{dataName}.setUpdateBy(request.getUserId());
        return $!{dataName};
        })
        .collect(Collectors.toList());
    $!{dataName}Dao.saveAll(itemList);
        return SaveAllResponse.builder()
        .id(itemList
        .stream()
        .map(BaseEntity::getId)
        .collect(Collectors.toList()))
        .build();
        }


@Override
public TotalResponse<$!{fileClass.name}> fetch$!{fileClass.name}List(Fetch$!{fileClass.name}ListRequest request){
final Q$!{fileClass.name} $!{dataName}=Q$!{fileClass.name}.$!{dataName};

final List<BooleanExpression> expressionList=new ArrayList<>();

#foreach($column in $fileClass.allFields)
    #if(!$tool.match($column.name, "^(update|delete|create).*$")&&!${column.hasModifierProperty("static")})
            if(!ObjectUtils.isEmpty(request.get$!tool.capitalize(${column.name})())){
            expressionList.add($!{dataName}.${column.name}.in(request.get$!tool.capitalize(${column.name})()));
            }
    #end
#end


        //===== order ===============
        final List<OrderSpecifier> orderSpecifiers=new ArrayList<>();
        if(!ObjectUtils.isEmpty(request.getOrderByUpdateAt())){
        switch(request.getOrderByUpdateAt()){
        case ASC:
        orderSpecifiers.add($!{dataName}.updateAt.asc());
        break;
        case DESC:
        orderSpecifiers.add($!{dataName}.updateAt.desc());
        }
        }


final JPAQuery<$!{fileClass.name}> jpaQuery=new JPAQuery<>(entityManager)
        .select($!{dataName})
        .from($!{dataName})
        .where(expressionList.toArray(new BooleanExpression[0]))
        .orderBy(orderSpecifiers.toArray(new OrderSpecifier[0]));

        return FetchDataRequest.handlePageResult(request,jpaQuery);
        }


@Override
@Transactional(rollbackFor = Exception.class)
public void delete$!{fileClass.name}(DeleteDataRequest request){
    $!{tool.decapitalize($!{fileClass.name})}Dao.softDelete(System.currentTimeMillis(),request.getUserId(),request.getId());
        }

        }