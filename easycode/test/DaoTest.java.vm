$!setting.setFileName($tool.append($fileClass.name, "DaoTest.java"))

##拿到主键
#foreach($column in $fileClass.allFields)
    #if(!$column.name.equals("id"))
        #set($pk = $column)
    #end
#end

package $!{file.packageName.substring(0,${file.packageName.indexOf("model")})}dao;

import ${fileClass.qualifiedName};
import $!{file.packageName.substring(0,${file.packageName.indexOf("model")})}utils.RandomDataFactory;
import com.onestep.pmms.financeeapproval.model.entity.Event;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;
import java.util.Optional;

@SpringBootTest
@ActiveProfiles("test")
@RunWith(SpringRunner.class)
public class $!{fileClass.name}DaoTest {

    @Autowired
    private $!{fileClass.name}Dao testDao;

    @Test
    public void save_test() throws IllegalAccessException, InstantiationException {
        final $!{fileClass.name} single = RandomDataFactory.getSingle($!{fileClass.name}.class);
        single.setDeleteAt(null);
        final $!{fileClass.name} save = testDao.save(single);
        Assert.assertEquals(single, save);
        final $!{fileClass.name} search = testDao.findById(single.getId()).get();
        Assert.assertEquals(single, search);
    }

    @Test
    public void soft_delete_test() throws IllegalAccessException, InstantiationException {
        final $!{fileClass.name} single = RandomDataFactory.getSingle($!{fileClass.name}.class);
        single.setDeleteAt(System.currentTimeMillis());
        final $!{fileClass.name} save = testDao.save(single);
        Assert.assertEquals(single, save);
        Assert.assertFalse(testDao.findById(single.getId()).isPresent());
    }

}